{"version":3,"sources":["Savedpath.js","App.js","serviceWorker.js","index.js"],"names":["savedpath","props","react_default","a","createElement","id","gpxRAWstring","csvRAWstring","gpx","csv","infowindows","infowindow_on","App","db_path","name","document","getElementById","console","log","value","innerHTML","xhr","XMLHttpRequest","onreadystatechange","this","readyState","xhr2","xhr3","xhr4","status","open","send","upload_gpx","data","body","file","files","fr","FileReader","onload","result","push","readAsText","onloadend","i","offset","trackPoints","split","regex","GPSpoint","time","lon","lat","length","string","index","indexOf","substring","search","upload_csv","rawdata","statPoint","distance","strcount","rate","check","splspeed","speed","dispstr","dataPoint","displayPath","newdata","date","hours","minutes","seconds","date2","slice","Date","getHours","toString","getMinutes","getSeconds","hours2","minutes2","seconds2","base_hours","parseFloat","base_minutes","base_seconds","setHours","setMinutes","setSeconds","j","myLatLng","lilyPath","window","google","maps","Polyline","strokeColor","strokeOpacity","strokeWeight","path","getPath","avg_split","avg_rate","avg_disStr","tot_dis","LatLng","lng","map","setCenter","setZoom","InfoWindow","content","position","setMap","toFixed","newavg","parseInt","newsplit","toggleInfoWindows","undefined","close","className","type","onClick","Savedpath","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","responseText","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea6e2a20.chunk.js","sourcesContent":["import React from 'react';\n\nconst savedpath = (props) => {\n    return (\n      <div id=\"savedpath\">\n      </div>\n    );\n}\n\nexport default savedpath;\n","import React, { Component } from 'react';\nimport Savedpath from './Savedpath';\nimport './App.css';\nvar gpxRAWstring = [];\nvar csvRAWstring = [];\nvar gpx = [];\nvar csv = [];\nvar infowindows = [];\nvar infowindow_on = true;\n\nclass App extends Component {\n\n  db_path = () => {\n\n    var name = document.getElementById(\"pathname\");\n    console.log(name.value);\n    if(name.value == ''){\n      document.getElementById(\"displaysave\").innerHTML = \"Give a name to the path.\";\n      return;\n    }\n    document.getElementById(\"displaysave\").innerHTML = \"\";\n\n    // add name to saved path\n    document.getElementById('savedpath').innerHTML = name.value; //+ \"<button onclick='displayDBPath()'>Choose<button>\";\n\n    // delete db entries, then add to db\n    console.log(\"sending post request\");\n    var xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = handle_res\n    xhr.open(\"POST\", \"/clear\", true);\n    xhr.send(\"delete\");\n\n    function handle_res(){\n      if(this.readyState != 4) return;\n      console.log(\"sending post request\");\n      var xhr2 = new XMLHttpRequest();\n      xhr2.onreadystatechange = handle_res\n      xhr2.open(\"POST\", \"/uploadgpx\");\n      xhr2.send(gpxRAWstring);\n      console.log(gpxRAWstring);\n\n      function handle_res(){\n        if(this.readyState != 4) return;\n        console.log(\"sending post request\");\n        var xhr3 = new XMLHttpRequest();\n        xhr3.onreadystatechange = handle_res\n        xhr3.open(\"POST\", \"/uploadcsv\");\n        xhr3.send(csvRAWstring);\n        console.log(csvRAWstring);\n\n        function handle_res(){\n          if(this.readyState != 4) return;\n          var xhr4 = new XMLHttpRequest();\n          xhr4.onreadystatechange = handle_res\n          xhr4.open(\"POST\", \"/name\");\n          xhr4.send(name.value);\n\n          function handle_res(){\n            if(this.readyState != 4) return;\n            if(this.status != 200){\n              console.log(\"ERROR: State 4 of request\");\n            }\n          }\n\n          if(this.status != 200){\n            console.log(\"ERROR: State 4 of request\");\n          }\n        }\n\n        if(this.status != 200){\n          console.log(\"ERROR: State 4 of request\");\n        }\n      }\n      if(this.status != 200){\n        console.log(\"ERROR: State 4 of request\");\n      }\n    }\n\n\n  }\n\n  upload_gpx = () => {\n    gpx = [];\n    gpxRAWstring = [];\n    var data = [];\n    var body = '';\n    var input = document.getElementById(\"gpx\");\n    var file = input.files[0];\n    var fr = new FileReader();\n    fr.onload = function(){\n        var text = fr.result;\n        data.push(fr.result);\n      };\n    fr.readAsText(file);\n\n    fr.onloadend = function () {\n      console.log(data);\n      gpxRAWstring = data;\n      body = data[0];\n      console.log(body);\n      var trackPoints = body.split(\"</trkpt>\");\n      var regex = /[0-9 +-]/;\n      var i;\n      var offset;\n      var query_string = \"\";\n      var GPSpoint = {\n        time: \"sample\",\n        lon: \"sample\",\n        lat: \"sample\"\n      };\n\n      for(i=0;i<trackPoints.length-1; i++){\n        var string = trackPoints[i];\n\n        // Get the time\n        var index = string.indexOf(\"T\");\n        offset = string.substring(index).search(regex);\n        GPSpoint.time = string.substring(index+offset, index+offset+8);\n\n        // Get the Longitude\n        var index = string.indexOf(\"lon\");\n        offset = string.substring(index).search(regex);\n        GPSpoint.lon = string.substring(index+offset, index+offset+10);\n\n        // Get the Latitude\n        var index = string.indexOf(\"lat\");\n        offset = string.substring(index).search(regex);\n        GPSpoint.lat = string.substring(index+offset, index+offset+9);\n\n        // push the stat\n        gpx.push({\n          time: GPSpoint.time,\n          lon: GPSpoint.lon,\n          lat: GPSpoint.lat\n        });\n\n      }//for\n      console.log(gpx);\n\n    };\n\n    document.getElementById(\"submitgpx\").innerHTML = \"<img src = 'check.png' width='15' height='15'>\";\n\n  }\n\n  upload_csv = () => {\n    csv = [];\n    csvRAWstring = [];\n    var data = [];\n    var body = '';\n    var input = document.getElementById(\"csv\");\n    var file = input.files[0];\n    var fr = new FileReader();\n    fr.onload = function(){\n        var text = fr.result;\n        data.push(fr.result);\n      };\n    fr.readAsText(file);\n\n    fr.onloadend = function () {\n      console.log(data);\n      csvRAWstring = data;\n      body = data[0];\n      console.log(body);\n      var rawdata = body.split(\"\\r\");\n\n      var statPoint = {\n        distance: \"sample\",\n        time: \"sample\",\n        strcount: \"sample\",\n        rate: \"sample\",\n        check: \"sample\",\n        splspeed: \"sample\",\n        speed: \"sample\",\n        dispstr: \"sample\",\n      };\n\n      var i;\n      var dataPoint = [];\n      for(i=3;i<rawdata.length-1;i++){\n        dataPoint = rawdata[i].split(\",\");\n        statPoint.distance = dataPoint[0];\n        statPoint.time = dataPoint[1];\n        statPoint.strcount = dataPoint[2];\n        statPoint.rate = dataPoint[3];\n        statPoint.check = dataPoint[4];\n        statPoint.splspeed = dataPoint[5];\n        statPoint.speed = dataPoint[6];\n        statPoint.dispstr = dataPoint[7];\n\n        // push the stats\n        csv.push({\n          distance: statPoint.distance,\n          time: statPoint.time,\n          strcount: statPoint.strcount,\n          rate: statPoint.rate,\n          check: statPoint.check,\n          splspeed: statPoint.splspeed,\n          speed: statPoint.speed,\n          dispstr: statPoint.dispstr\n        });\n      } // for\n      console.log(csv);\n\n    };\n\n    document.getElementById(\"submitcsv\").innerHTML = \"<img src = 'check.png' width='15' height='15'>\";\n\n  }\n\n  displayPath = () => {\n\n    document.getElementById(\"submitcsv\").innerHTML = \"\";\n    document.getElementById(\"submitgpx\").innerHTML = \"\";\n    infowindows = [];\n    // cut out the decimals\n    var i;\n    var newdata;\n    for(i=0;i<csv.length;i++){\n      newdata = csv[i].time.slice(0,7);\n      csv[i].time = newdata;\n    }\n\n    var date;\n    var date_string;\n    var hours, minutes, seconds;\n    for(i=0;i<csv.length;i++){\n      hours = csv[i].time.slice(0, 1);\n      minutes = csv[i].time.slice(2, 4);\n      seconds = csv[i].time.slice(5, 7);\n      date_string = \"August 19, 2018 \" + hours + \":\" + minutes + \":\" + seconds;\n      date = new Date(date_string);\n\n      csv[i].time = date.getHours().toString()\n      + \":\" + date.getMinutes().toString()\n      + \":\" + date.getSeconds().toString();\n    }\n\n    // adjust the gpx time to be elapsed time\n    var date2;\n    var date_string2;\n\n    //console.log(gpx[0]);\n    var base_hours = parseFloat(gpx[0].time.slice(0, 2));\n    var base_minutes = parseFloat(gpx[0].time.slice(3, 5));\n    var base_seconds = parseFloat(gpx[0].time.slice(6, 8));\n\n    var hours2, minutes2, seconds2;\n    for(i=0;i<gpx.length;i++){\n      hours2 = gpx[i].time.slice(0, 2);\n      minutes2 = gpx[i].time.slice(3, 5);\n      seconds2 = gpx[i].time.slice(6, 8);\n      date_string2 = \"August 19, 2018 \" + hours2 + \":\" + minutes2 + \":\" + seconds2;\n      date2 = new Date(date_string2);\n\n      date2.setHours(date2.getHours() - base_hours);\n      date2.setMinutes(date2.getMinutes() - base_minutes);\n      date2.setSeconds(date2.getSeconds() - base_seconds);\n\n      gpx[i].time = date2.getHours().toString()\n      + \":\" + date2.getMinutes().toString()\n      + \":\" + date2.getSeconds().toString();\n\n    }\n        var lilyPath = new window.google.maps.Polyline({\n          //geodesic: true,\n          strokeColor: '#FF0000',\n          strokeOpacity: 1.0,\n          strokeWeight: 5,\n        });\n\n        var i, j;\n        var path = lilyPath.getPath();\n        var myLatLng;\n        var infowindow;\n        var split;\n        var avg_split = 0;\n        var avg_rate = 0;\n        var avg_disStr = 0;\n        var tot_dis = 0;\n\n        for(i=0;i<gpx.length;i++){\n          myLatLng = new window.google.maps.LatLng({lat: parseFloat(gpx[i].lat), lng: parseFloat(gpx[i].lon)});\n          path.push(myLatLng);\n          if(i==0){window.map.setCenter(myLatLng); window.map.setZoom(13);}\n\n          for(j=0;j<csv.length;j++){\n            if(csv[j].time == gpx[i].time){\n              split = csv[j].splspeed.slice(1,5) + \" @ \" + csv[j].rate.slice(1,5);\n              console.log(split);\n              //console.log(split);\n              avg_split += (parseFloat(csv[j].splspeed.slice(1,5)[0])*60) + parseFloat(csv[j].splspeed.slice(1,5).slice(2,5));\n              avg_rate += parseFloat(csv[j].rate.slice(1,5));\n              avg_disStr += parseFloat(csv[j].dispstr.slice(0,5));\n\n              infowindows.push(new window.google.maps.InfoWindow({\n                  content: split,\n                  position: myLatLng,\n                  map: window.map\n              }));\n\n            }// if\n          }// csv\n\n\n        }// gpx\n\n        lilyPath.strokeColor = \"darkblue\";\n        lilyPath.setMap(window.map);\n\n        console.log(avg_rate)\n\n        avg_rate = (avg_rate/csv.length).toFixed(1);\n        avg_split = avg_split/csv.length;\n        var newavg = parseInt(avg_split/60); // minutes as int\n        avg_split = (parseFloat((avg_split/60).toString().slice(1,3)))*60;\n        console.log((avg_split/60).toString().slice(1,3));\n        console.log(newavg);\n        console.log(avg_split);\n        avg_split = newavg + avg_split;\n        var newsplit = newavg.toString()+\":\"+avg_split.toString();\n        avg_disStr = (avg_disStr/csv.length).toFixed(2);\n        tot_dis = csv[csv.length-1].distance;\n        document.getElementById(\"stats\").innerHTML = \"<div className='hero'>\" +\n                                                      \"<div className = 'box'><li><ul>Average stroke rate (str/min): <strong>\" +\n                                                      avg_rate.toString() + \"</strong></ul><ul>Average Split (time/500m): <strong>\" +\n                                                      newsplit + \"</strong></ul><ul>Average Distance per Stroke (m): <strong>\" +\n                                                      avg_disStr.toString() + \"</strong></ul><ul>Total Distance (m): <strong>\" +\n                                                      tot_dis.toString() + \"</strong></ul></li></div></div>\";\n\n  }\n\n  toggleInfoWindows = () => {\n    if (csv === undefined || csv.length == 0) {\n      return;\n    }\n\n    if (infowindow_on == false){\n      // populate the map\n      infowindow_on = true;\n      for (var i=0;i<infowindows.length;i++) {\n        infowindows[i].open(window.map);\n      }\n    } else if(infowindow_on == true){\n      // take off map\n      infowindow_on = false;\n      for (var i=0;i<infowindows.length;i++) {\n        infowindows[i].close();\n      }\n    }\n  }\n\n\n  /*displayDBPath = () => {\n    csv = [];\n    csvRAWstring = [];\n    gpx = [];\n    gpxRAWstring = [];\n\n    // get\n    var xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = function(){\n      if(this.readyState != 4){ console.log(this.readyState); return;}\n      gpx = JSON.parse(this.responseText);\n      console.log(this.responseText);\n      var xhr2 = new XMLHttpRequest();\n      xhr2.onreadystatechange = handle_res\n      xhr2.open(\"GET\", \"/get_csv\", true);\n      xhr2.send();\n\n      function handle_res(){\n        if(this.readyState != 4) return;\n        csv = JSON.parse(this.responseText);\n        console.log(this.responseText);\n        // display\n        // cut out the decimals\n        var i;\n        var newdata;\n        for(i=0;i<csv.length;i++){\n          newdata = csv[i].elapsed.slice(0,7);\n          csv[i].elapsed = newdata;\n        }\n\n        var date;\n        var date_string;\n        var hours, minutes, seconds;\n        for(i=0;i<csv.length;i++){\n          hours = csv[i].elapsed.slice(0, 1);\n          minutes = csv[i].elapsed.slice(2, 4);\n          seconds = csv[i].elapsed.slice(5, 7);\n          date_string = \"August 19, 2018 \" + hours + \":\" + minutes + \":\" + seconds;\n          date = new Date(date_string);\n\n          csv[i].elapsed = date.getHours().toString()\n          + \":\" + date.getMinutes().toString()\n          + \":\" + date.getSeconds().toString();\n        }\n\n        // adjust the gpx time to be elapsed time\n        var date2;\n        var date_string2;\n\n        //console.log(gpx[0]);\n        var base_hours = parseFloat(gpx[0].timeofday.slice(0, 2));\n        var base_minutes = parseFloat(gpx[0].timeofday.slice(3, 5));\n        var base_seconds = parseFloat(gpx[0].timeofday.slice(6, 8));\n\n        var hours2, minutes2, seconds2;\n        for(i=0;i<gpx.length;i++){\n          hours2 = gpx[i].timeofday.slice(0, 2);\n          minutes2 = gpx[i].timeofday.slice(3, 5);\n          seconds2 = gpx[i].timeofday.slice(6, 8);\n          date_string2 = \"August 19, 2018 \" + hours2 + \":\" + minutes2 + \":\" + seconds2;\n          date2 = new Date(date_string2);\n\n          date2.setHours(date2.getHours() - base_hours);\n          date2.setMinutes(date2.getMinutes() - base_minutes);\n          date2.setSeconds(date2.getSeconds() - base_seconds);\n\n          gpx[i].timeofday = date2.getHours().toString()\n          + \":\" + date2.getMinutes().toString()\n          + \":\" + date2.getSeconds().toString();\n\n        }\n\n        var lilyPath = new window.google.maps.Polyline({\n          //geodesic: true,\n          strokeColor: '#FF0000',\n          strokeOpacity: 1.0,\n          strokeWeight: 5,\n        });\n\n        var i, j;\n        var path = lilyPath.getPath();\n        var myLatLng;\n        var infowindow;\n        var split;\n\n        for(i=0;i<gpx.length;i++){\n          myLatLng = new window.google.maps.LatLng({lat: parseFloat(gpx[i].lat), lng: parseFloat(gpx[i].lon)});\n          path.push(myLatLng);\n          if(i==0){window.map.setCenter(myLatLng); window.map.setZoom(13);}\n\n          for(j=0;j<csv.length;j++){\n            if(csv[j].time == gpx[i].time){\n              split = csv[j].splspeed;\n              infowindow = new window.google.maps.InfoWindow({\n                  content: split,\n                  position: myLatLng,\n                  map: window.map\n              });\n\n            }// if\n          }// csv\n\n\n        }// gpx\n        lilyPath.setMap(window.map);\n\n\n        if(this.status != 200){\n          console.log(\"ERROR: State 4 of request\");\n        }\n      }\n\n      if(this.status != 200){\n        console.log(\"ERROR: State 4 of request\");\n      }\n    };\n    xhr.open(\"GET\", \"/get_gpx\", true);\n    xhr.send();\n  }*/\n\n  render() {\n    return (\n      <div className=\"content is-large has-text-centered\">\n\n          <p>\n          <div className=\"container is-widescreen\">\n          <div className=\"hero\">\n          <div className = \"box\">\n          <h1>Practice Evaluator</h1>\n          <h6 className=\"content is-medium\" ><i>WPI Mens Rowing</i></h6>\n          </div>\n          </div>\n          </div>\n          </p>\n\n          <p>\n          <div className = \"container is-widescreen\">\n            <div id=\"stats\"></div>\n          </div>\n          </p>\n\n          <p>\n          <div className=\"container is-widescreen\">\n          <div className=\"hero\">\n          <div className = \"box\">\n            <h3>Add GPX file</h3>\n            <p className=\"content is-small\">\n             <form>\n               <input className=\"content\" type=\"file\" id=\"gpx\" />\n             </form>\n             </p>\n            <p className=\"field\">\n             <button className=\"button is-primary\" onClick={this.upload_gpx}>Submit</button>\n             <p className=\"content\">\n             <div id=\"submitgpx\"></div>\n             </p>\n            </p>\n\n            <h3>Add CSV file</h3>\n            <p className=\"content is-small\">\n             <form>\n                <input className=\"content\" type=\"file\" id=\"csv\" />\n             </form>\n            </p>\n            <p className=\"field\">\n             <button className=\"button is-primary\" onClick={this.upload_csv}>Submit</button>\n             <p className=\"content\">\n             <div id=\"submitcsv\"></div>\n             </p>\n            </p>\n            </div>\n          </div>\n          </div>\n          </p>\n\n          <p>\n          <div className = \"container is-widescreen\">\n          <div className=\"hero\">\n          <div className = \"box\">\n            <div className = \"field is-group\">\n              <p>\n                <button className=\"button is-success is-large\" onClick={this.displayPath}>Draw Path</button>\n              </p>\n              <p>\n              <button className=\"button is-link\" onClick={this.toggleInfoWindows}>Toggle Splits</button>\n              </p>\n            </div>\n          </div>\n          </div>\n          </div>\n          </p>\n\n          <p>\n          <div className = \"container is-widescreen\">\n          <div className=\"hero\">\n          <div className = \"box\">\n            <form>\n              <input type='text' id='pathname'/>\n              </form>\n          <div id=\"displaysave\"></div>\n            <button className=\"button is-primary\" onClick={this.db_path} id=\"save\">Save This Path</button>\n          </div>\n          </div>\n          </div>\n          </p>\n\n\n\n          <p>\n          <div className = \"container is-widescreen\">\n          <div className=\"hero\">\n          <div className = \"box\">\n            <h2>Saved Path</h2>\n            <Savedpath/>\n          </div>\n          </div>\n          </div>\n          </p>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nvar options;\nvar google;\n\nfunction initMap(){\n  options = {\n    zoom:8,\n    center:{lat:42.3601, lng:-71.0589}\n  }\n  google = window.google;\n  window.map = new google.maps.Map(document.getElementById(\"map\"), options);\n\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nfunction displayDBPath(){\n  var csv = [];\n  var gpx = [];\n\n  // get\n  var xhr = new XMLHttpRequest();\n  xhr.onreadystatechange = function(){\n    if(this.readyState != 4){ console.log(this.readyState); return;}\n    gpx = JSON.parse(this.responseText);\n    //console.log(this.responseText);\n    var xhr2 = new XMLHttpRequest();\n    xhr2.onreadystatechange = handle_res\n    xhr2.open(\"GET\", \"/get_csv\", true);\n    xhr2.send();\n\n    function handle_res(){\n      if(this.readyState != 4) return;\n      csv = JSON.parse(this.responseText);\n      //console.log(this.responseText);\n      // display\n      // cut out the decimals\n      var i;\n      var newdata;\n      for(i=0;i<csv.length;i++){\n        newdata = csv[i].elapsed.slice(0,7);\n        csv[i].elapsed = newdata;\n      }\n\n      var date;\n      var date_string;\n      var hours, minutes, seconds;\n      for(i=0;i<csv.length;i++){\n        hours = csv[i].elapsed.slice(0, 1);\n        minutes = csv[i].elapsed.slice(2, 4);\n        seconds = csv[i].elapsed.slice(5, 7);\n        date_string = \"August 19, 2018 \" + hours + \":\" + minutes + \":\" + seconds;\n        date = new Date(date_string);\n\n        csv[i].elapsed = date.getHours().toString()\n        + \":\" + date.getMinutes().toString()\n        + \":\" + date.getSeconds().toString();\n      }\n\n      // adjust the gpx time to be elapsed time\n      var date2;\n      var date_string2;\n\n      //console.log(gpx[0]);\n      var base_hours = parseFloat(gpx[0].timeofday.slice(0, 2));\n      var base_minutes = parseFloat(gpx[0].timeofday.slice(3, 5));\n      var base_seconds = parseFloat(gpx[0].timeofday.slice(6, 8));\n\n      var hours2, minutes2, seconds2;\n      for(i=0;i<gpx.length;i++){\n        hours2 = gpx[i].timeofday.slice(0, 2);\n        minutes2 = gpx[i].timeofday.slice(3, 5);\n        seconds2 = gpx[i].timeofday.slice(6, 8);\n        date_string2 = \"August 19, 2018 \" + hours2 + \":\" + minutes2 + \":\" + seconds2;\n        date2 = new Date(date_string2);\n\n        date2.setHours(date2.getHours() - base_hours);\n        date2.setMinutes(date2.getMinutes() - base_minutes);\n        date2.setSeconds(date2.getSeconds() - base_seconds);\n\n        gpx[i].timeofday = date2.getHours().toString()\n        + \":\" + date2.getMinutes().toString()\n        + \":\" + date2.getSeconds().toString();\n\n      }\n\n      var lilyPath = new window.google.maps.Polyline({\n        //geodesic: true,\n        strokeColor: '#FF0000',\n        strokeOpacity: 1.0,\n        strokeWeight: 5,\n      });\n\n      var i, j;\n      var path = lilyPath.getPath();\n      var myLatLng;\n      var infowindow;\n      var split;\n\n      for(i=0;i<gpx.length;i++){\n        myLatLng = new window.google.maps.LatLng({lat: parseFloat(gpx[i].lat), lng: parseFloat(gpx[i].lon)});\n        path.push(myLatLng);\n        if(i==0){window.map.setCenter(myLatLng); window.map.setZoom(13);}\n\n        for(j=0;j<csv.length;j++){\n          if(csv[j].time == gpx[i].time){\n            split = csv[j].splspeed;\n            infowindow = new window.google.maps.InfoWindow({\n                content: split,\n                position: myLatLng,\n                map: window.map\n            });\n\n          }// if\n        }// csv\n\n\n      }// gpx\n\n      lilyPath.strokeColor = \"darkblue\";\n      lilyPath.setMap(window.map);\n      console.log(lilyPath.getPath());\n\n\n      if(this.status != 200){\n        console.log(\"ERROR: State 4 of request\");\n      }\n    }\n\n    if(this.status != 200){\n      console.log(\"ERROR: State 4 of request\");\n    }\n  };\n  xhr.open(\"GET\", \"/get_gpx\", true);\n  xhr.send();\n\n  console.log(\"displayDBPath over\");\n}\n\nwindow.onload = function (){\n  var name = '';\n  var xhr = new XMLHttpRequest();\n  xhr.onreadystatechange = function(){\n    if(this.readyState != 4){ console.log(this.readyState); return;}\n    console.log(this.responseText);\n    if(this.responseText != \"[]\"){\n      name = this.responseText;\n      document.getElementById('savedpath').innerHTML = name.split('\"')[5];\n      /*document.getElementById('savedpath').addEventListener('click', function(event){\n        displayDBPath();\n      });*/\n      //console.log(\"event displayDBPath() set for db path\");\n    }\n    if(this.status != 200){\n      console.log(\"ERROR: State 4 of request\");\n    }\n  };\n  xhr.open(\"GET\", \"/name\", true);\n  xhr.send();\n}\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}